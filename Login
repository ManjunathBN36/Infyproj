login

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @Column(unique = true)
    private String email;

    private String phone;
    private String role;
    private String password;
    private String address;
}


public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByEmail(String email);
}


@Service
public class UserService {
    @Autowired
    private UserRepository repo;

    public User register(User user) {
        user.setPassword(new BCryptPasswordEncoder().encode(user.getPassword()));
        return repo.save(user);
    }

    public boolean login(String email, String password) {
        Optional<User> userOpt = repo.findByEmail(email);
        return userOpt.isPresent() &&
               new BCryptPasswordEncoder().matches(password, userOpt.get().getPassword());
    }
}


@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "*")
public class AuthController {

    @Autowired
    private UserService userService;

    @PostMapping("/register")
    public ResponseEntity<?> register(@RequestBody User user) {
        return ResponseEntity.ok(userService.register(user));
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody Map<String, String> body) {
        boolean success = userService.login(body.get("email"), body.get("password"));
        return success ? ResponseEntity.ok("Login successful") : ResponseEntity.status(401).body("Invalid credentials");
    }
}
